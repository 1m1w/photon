diff --git a/cloudinit/net/networkd.py b/cloudinit/net/networkd.py
new file mode 100644
index 00000000..d417a4fd
--- /dev/null
+++ b/cloudinit/net/networkd.py
@@ -0,0 +1,421 @@
+# vi: ts=4 expandtab
+#
+# Copyright (C) 2020 VMware Inc.
+#
+
+import os
+import copy
+import yaml
+import fnmatch
+
+from . import renderer
+from pwd import getpwnam
+from grp import getgrnam
+from cloudinit import util
+from cloudinit import log as logging
+from cloudinit.net import SYS_CLASS_NET, get_devicelist
+from .network_state import subnet_is_ipv6, NET_CONFIG_TO_V2, IPV6_DYNAMIC_TYPES
+
+LOG = logging.getLogger(__name__)
+
+
+def _get_params_dict_by_match(config, match):
+    return dict((key, value) for (key, value) in config.items()
+                if key.startswith(match))
+
+
+def _extract_addresses(config, entry, ifname, features=None):
+    '''
+    This method parses cloudinit.net.network_state dictionary (config)
+
+    An example config dictionary might look like:
+
+    {'mac_address': '52:54:00:12:34:00',
+     'name': 'interface0',
+     'subnets': [
+        {'address': '192.168.1.2/24',
+         'mtu': 1501,
+         'type': 'static'},
+        {'address': '2001:4800:78ff:1b:be76:4eff:fe06:1000',
+         'mtu': 1480,
+         'netmask': 64,
+         'type': 'static'}],
+      'type: physical',
+      'accept-ra': 'true'
+    }
+
+    An entry dictionary looks like:
+
+    {'set-name': 'interface0',
+     'match': {'macaddress': '52:54:00:12:34:00'},
+     'mtu': 1501}
+
+    After modification returns
+
+    {'set-name': 'interface0',
+     'match': {'macaddress': '52:54:00:12:34:00'},
+     'mtu': 1501,
+     'address': ['192.168.1.2/24', '2001:4800:78ff:1b:be76:4eff:fe06:1000'],
+     'ipv6-mtu': 1480}
+    '''
+
+    def _listify(obj, token=' '):
+        'Helper to convert strings to list of strings, handle single string'
+        if not obj or type(obj) not in [str]:
+            return obj
+        if token in obj:
+            return obj.split(token)
+        else:
+            return [obj, ]
+
+    if features is None:
+        features = []
+    addresses = []
+    routes = []
+    nameservers = []
+    searchdomains = []
+    subnets = config.get('subnets', [])
+    if subnets is None:
+        subnets = []
+    for subnet in subnets:
+        sn_type = subnet.get('type')
+        if sn_type.startswith('dhcp'):
+            if sn_type == 'dhcp':
+                sn_type += '4'
+            entry.update({sn_type: True})
+        elif sn_type in IPV6_DYNAMIC_TYPES:
+            entry.update({'dhcp6': True})
+        elif sn_type in ['static']:
+            addr = '%s' % subnet.get('address')
+            if 'prefix' in subnet:
+                addr += '/%d' % subnet.get('prefix')
+            if 'gateway' in subnet and subnet.get('gateway'):
+                gateway = subnet.get('gateway')
+                if ':' in gateway:
+                    entry.update({'gateway6': gateway})
+                else:
+                    entry.update({'gateway4': gateway})
+            if 'dns_nameservers' in subnet:
+                nameservers += _listify(subnet.get('dns_nameservers', []))
+            if 'dns_search' in subnet:
+                searchdomains += _listify(subnet.get('dns_search', []))
+            if 'mtu' in subnet:
+                mtukey = 'mtu'
+                if subnet_is_ipv6(subnet) and 'ipv6-mtu' in features:
+                    mtukey = 'ipv6-mtu'
+                entry.update({mtukey: subnet.get('mtu')})
+            for route in subnet.get('routes', []):
+                to_net = '%s/%s' % (route.get('network'),
+                                    route.get('prefix'))
+                new_route = {
+                    'via': route.get('gateway'),
+                    'to': to_net,
+                }
+                if 'metric' in route:
+                    new_route.update({'metric': route.get('metric', 100)})
+                routes.append(new_route)
+
+            addresses.append(addr)
+
+    if 'mtu' in config:
+        entry_mtu = entry.get('mtu')
+        if entry_mtu and config['mtu'] != entry_mtu:
+            LOG.warning(
+                'Network config: ignoring %s device-level mtu:%s because'
+                ' ipv4 subnet-level mtu:%s provided.',
+                ifname, config['mtu'], entry_mtu)
+        else:
+            entry['mtu'] = config['mtu']
+    if len(addresses) > 0:
+        entry.update({'addresses': addresses})
+    if len(routes) > 0:
+        entry.update({'routes': routes})
+    if len(nameservers) > 0:
+        ns = {'addresses': nameservers}
+        entry.update({'nameservers': ns})
+    if len(searchdomains) > 0:
+        ns = entry.get('nameservers', {})
+        ns.update({'search': searchdomains})
+        entry.update({'nameservers': ns})
+    if 'accept-ra' in config and config['accept-ra'] is not None:
+        entry.update({'accept-ra': util.is_true(config.get('accept-ra'))})
+
+
+def _extract_bond_slaves_by_name(interfaces, entry, bond_master):
+    bond_slave_names = sorted([name for (name, cfg) in interfaces.items()
+                               if cfg.get('bond-master', None) == bond_master])
+    if len(bond_slave_names) > 0:
+        entry.update({'interfaces': bond_slave_names})
+
+
+class Renderer(renderer.Renderer):
+    ''' Renders network information in /etc/systemd/netwrok/ '''
+
+    def __init__(self, config=None):
+        if not config:
+            config = {}
+        self.resolved_conf = config.get('resolved_conf_fn', '/etc/systemd/resolved.conf')
+        self.network_conf_dir = config.get('network_conf_dir', '/etc/systemd/network/')
+        self.network_fname_fptr = config.get('network_fname_fptr', '')
+
+
+    def create_network_file(self, content):
+        ifindex = 10
+
+        LOG.debug('Setting Networking Config Version 2')
+
+        for k, v in content.items():
+            if k == 'version' or k != 'ethernets':
+                continue
+
+            for key, val in v.items():
+                link = key
+
+                conf = '[Match]\n'
+                # Generate [Match] section
+                if 'match' in val:
+                    match = val['match']
+
+                    for i in match:
+                        if i == 'macaddress':
+                            conf += 'MACAddress=%s\n\n' % (match['macaddress'])
+                        elif i == 'driver':
+                            conf += 'Driver=%s\n' % (match['driver'])
+                            conf += 'Name=%s\n\n' % (link)
+                        elif i == 'name':
+                            conf += 'Name=%s\n\n' % (match['name'])
+                else:
+                    conf += 'Name=%s\n\n' % link
+
+                # Generate [Link] section
+                if ('mtu' in val):
+                    conf += '[Link]\nMTUBytes=%s\n\n' % (val['mtu'])
+
+                # Generate [Network] section
+                conf += '[Network]\n'
+
+                if ('dhcp4' in val and 'dhcp6' in val):
+                    if (val['dhcp4'] == True and val['dhcp6'] == True):
+                        conf += 'DHCP=yes\n'
+                    if (val['dhcp4'] == True and val['dhcp6'] == False):
+                        conf += 'DHCP=ipv4\n'
+                    if (val['dhcp4'] == False and val['dhcp6'] == True):
+                        conf += 'DHCP=ipv6\n'
+                    if (val['dhcp4'] == False and val['dhcp6'] == False):
+                        conf += 'DHCP=no\n'
+                elif ('dhcp4' in val):
+                    if val['dhcp4'] == True:
+                        conf += 'DHCP=ipv4\n'
+                elif ('dhcp6' in val):
+                    if (val['dhcp6'] == True):
+                        conf += 'DHCP=ipv6\n'
+
+                if ('nameservers' in val):
+                    nameservers = val['nameservers']
+
+                    if ('search' in nameservers):
+                        search = nameservers['search']
+                        s = ' '.join(search)
+                        conf += 'Domains=%s\n' % s
+                    if ('addresses' in nameservers):
+                        s = nameservers['addresses']
+                        conf += 'DNS=%s\n' % ' '.join(s)
+
+                #  Generate [DHCP] section
+                if ('dhcp4domain' in val):
+                    if val['dhcp4domain'] == True:
+                        conf += '\n[DHCP]\nUseDomains=yes\n\n'
+                    else:
+                        conf += '\n[DHCP]\nUseDomains=no\n\n'
+
+                # Generate [Address] section
+                if ('addresses' in val):
+                    for i in val['addresses']:
+                        conf += '\n[Address]\nAddress=%s\n' % (i)
+
+                # Generate [Route] section
+                if ('gateway4' in val):
+                    conf += '\n[Route]\nGateway=%s\n' % (val['gateway4'])
+
+                if ('gateway6' in val):
+                    conf += '\n[Route]\nGateway=%s\n' % (val['gateway6'])
+
+                if ('routes' in val):
+                    routes = val['routes']
+
+                    for i in routes:
+                        conf += '\n[Route]\n'
+                        if (i['via']):
+                            conf += 'Gateway=%s\n' % (i['via'])
+                        if (i['to']):
+                            conf += 'Destination=%s\n' % (i['to'])
+                        if (i['metric']):
+                            conf += 'Metric=%s\n' % (i['metric'])
+
+                net_fn = self.network_fname_fptr(self.network_conf_dir, link)
+                if not net_fn:
+                    net_fn = self.network_conf_dir + str(ifindex) + '-' + link + '.network'
+                else:
+                    net_fn = self.network_conf_dir + net_fn
+
+                util.write_file(net_fn, conf)
+                LOG.debug('shedi - %s \n %s\n%s\n', link, content, conf)
+                os.chown(net_fn, getpwnam('systemd-network')[2], getgrnam('systemd-network')[2])
+
+
+    def render_network_state(self, network_state, templates=None, target=None):
+        # check network state for version
+        # if v2, then extract network_state.config
+        # else render_v2_from_state
+        fpnplan = os.path.join(util.target_path(target), self.network_conf_dir)
+        util.ensure_dir(os.path.dirname(fpnplan))
+
+        # render from state
+        content = self._render_content(network_state)
+        self.create_network_file(content)
+
+    def _render_content(self, network_state):
+
+        # if content already in v2 format, pass it back
+        if network_state.version == 2:
+            LOG.debug('V2 to V2 passthrough')
+            return network_state.config
+
+        ethernets = {}
+        wifis = {}
+        bridges = {}
+        bonds = {}
+        vlans = {}
+        content = {}
+
+        interfaces = network_state._network_state.get('interfaces', [])
+
+        nameservers = network_state.dns_nameservers
+        searchdomains = network_state.dns_searchdomains
+
+        for config in network_state.iter_interfaces():
+            ifname = config.get('name')
+            # filter None (but not False) entries up front
+            ifcfg = dict((key, value) for (key, value) in config.items()
+                         if value is not None)
+
+            if_type = ifcfg.get('type')
+            if if_type == 'physical':
+                # required_keys = ['name', 'mac_address']
+                eth = {
+                    'set-name': ifname,
+                    'match': ifcfg.get('match', None),
+                }
+                if eth['match'] is None:
+                    macaddr = ifcfg.get('mac_address', None)
+                    if macaddr is not None:
+                        eth['match'] = {'macaddress': macaddr.lower()}
+                    else:
+                        del eth['match']
+                        del eth['set-name']
+                _extract_addresses(ifcfg, eth, ifname)
+                ethernets.update({ifname: eth})
+
+            elif if_type == 'bond':
+                # required_keys = ['name', 'bond_interfaces']
+                bond = {}
+                bond_config = {}
+                # extract bond params and drop the bond_ prefix as it's
+                # redundent in v2 yaml format
+                v2_bond_map = NET_CONFIG_TO_V2.get('bond')
+                for match in ['bond_', 'bond-']:
+                    bond_params = _get_params_dict_by_match(ifcfg, match)
+                    for (param, value) in bond_params.items():
+                        newname = v2_bond_map.get(param.replace('_', '-'))
+                        if newname is None:
+                            continue
+                        bond_config.update({newname: value})
+
+                if len(bond_config) > 0:
+                    bond.update({'parameters': bond_config})
+                if ifcfg.get('mac_address'):
+                    bond['macaddress'] = ifcfg.get('mac_address').lower()
+                slave_interfaces = ifcfg.get('bond-slaves')
+                if slave_interfaces == 'none':
+                    _extract_bond_slaves_by_name(interfaces, bond, ifname)
+                _extract_addresses(ifcfg, bond, ifname)
+                bonds.update({ifname: bond})
+
+            elif if_type == 'bridge':
+                # required_keys = ['name', 'bridge_ports']
+                ports = sorted(copy.copy(ifcfg.get('bridge_ports')))
+                bridge = {
+                    'interfaces': ports,
+                }
+                # extract bridge params and drop the bridge prefix as it's
+                # redundent in v2 yaml format
+                match_prefix = 'bridge_'
+                params = _get_params_dict_by_match(ifcfg, match_prefix)
+                br_config = {}
+
+                # v2 yaml uses different names for the keys
+                # and at least one value format change
+                v2_bridge_map = NET_CONFIG_TO_V2.get('bridge')
+                for (param, value) in params.items():
+                    newname = v2_bridge_map.get(param)
+                    if newname is None:
+                        continue
+                    br_config.update({newname: value})
+                    if newname in ['path-cost', 'port-priority']:
+                        # <interface> <value> -> <interface>: int(<value>)
+                        newvalue = {}
+                        for val in value:
+                            (port, portval) = val.split()
+                            newvalue[port] = int(portval)
+                        br_config.update({newname: newvalue})
+
+                if len(br_config) > 0:
+                    bridge.update({'parameters': br_config})
+                if ifcfg.get('mac_address'):
+                    bridge['macaddress'] = ifcfg.get('mac_address').lower()
+                _extract_addresses(ifcfg, bridge, ifname)
+                bridges.update({ifname: bridge})
+
+            elif if_type == 'vlan':
+                # required_keys = ['name', 'vlan_id', 'vlan-raw-device']
+                vlan = {
+                    'id': ifcfg.get('vlan_id'),
+                    'link': ifcfg.get('vlan-raw-device')
+                }
+                macaddr = ifcfg.get('mac_address', None)
+                if macaddr is not None:
+                    vlan['macaddress'] = macaddr.lower()
+                _extract_addresses(ifcfg, vlan, ifname)
+                vlans.update({ifname: vlan})
+
+        # inject global nameserver values under each all interface which
+        # has addresses and do not already have a DNS configuration
+        if nameservers or searchdomains:
+            nscfg = {'addresses': nameservers, 'search': searchdomains}
+            for section in [ethernets, wifis, bonds, bridges, vlans]:
+                for _name, cfg in section.items():
+                    if 'nameservers' in cfg or 'addresses' not in cfg:
+                        continue
+                    cfg.update({'nameservers': nscfg})
+
+        if ethernets:
+            content.update({'ethernets': ethernets})
+        if wifis:
+            content.update({'wifis': wifis})
+        if bonds:
+            content.update({'bonds': bonds})
+        if bridges:
+            content.update({'bridges': bridges})
+        if vlans:
+            content.update({'vlans': vlans})
+
+        return content
+
+
+def available(target=None):
+    expected = ['systemctl']
+    search = ['/usr/bin', '/bin']
+    for p in expected:
+        if not util.which(p, search=search, target=target):
+            return False
+    return True
diff --git a/cloudinit/net/renderers.py b/cloudinit/net/renderers.py
index 5117b4a5..0062cabc 100644
--- a/cloudinit/net/renderers.py
+++ b/cloudinit/net/renderers.py
@@ -4,14 +4,16 @@ from . import eni
 from . import netplan
 from . import RendererNotFoundError
 from . import sysconfig
+from . import networkd
 
 NAME_TO_RENDERER = {
     "eni": eni,
     "netplan": netplan,
     "sysconfig": sysconfig,
+    "networkd": networkd,
 }
 
-DEFAULT_PRIORITY = ["eni", "sysconfig", "netplan"]
+DEFAULT_PRIORITY = ["networkd", "eni", "sysconfig", "netplan"]
 
 
 def search(priority=None, target=None, first=False):
